/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 27.02.2022 15:56:02

#include <stdio.h>
#include <stdlib.h>
#include <vector>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

constexpr int kTensorArenaSize = 12544;

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_RESHAPE, OP_CONV_2D, OP_MAX_POOL_2D, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[17];
TfLiteEvalTensor tflEvalTensors[17];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[8];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,1160 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0028186275158077478, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4] = { 1, 29, 40, 1, };
const TfArray<1, int> tensor_dimension1 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data2[2] = { -1, 1280, };
const TfArray<1, int> tensor_dimension2 = { 1, { 2 } };
const ALIGN(16) int8_t tensor_data3[8*3*3*1] = { 
  /* [0][0][][] */ 22, 106, -3, 
  /* [0][1][][] */ 25, 112, 28, 
  /* [0][2][][] */ 26, 127, 50, 
  /* [1][0][][] */ -127, -31, -55, 
  /* [1][1][][] */ -116, -29, -86, 
  /* [1][2][][] */ -41, -114, -30, 
  /* [2][0][][] */ -127, -72, -76, 
  /* [2][1][][] */ -81, -81, -106, 
  /* [2][2][][] */ -83, -61, -50, 
  /* [3][0][][] */ 27, 127, 58, 
  /* [3][1][][] */ 8, 84, 80, 
  /* [3][2][][] */ 9, 99, 89, 
  /* [4][0][][] */ 90, 63, 54, 
  /* [4][1][][] */ 64, 52, 33, 
  /* [4][2][][] */ 127, 23, 10, 
  /* [5][0][][] */ -10, 21, 127, 
  /* [5][1][][] */ -41, 78, 125, 
  /* [5][2][][] */ 1, 76, 115, 
  /* [6][0][][] */ -4, -41, -80, 
  /* [6][1][][] */ -91, -49, -7, 
  /* [6][2][][] */ -127, -76, 7, 
  /* [7][0][][] */ -61, -92, -94, 
  /* [7][1][][] */ -109, -77, -127, 
  /* [7][2][][] */ -112, -14, 8, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 8,3,3,1 } };
const TfArray<8, float> quant3_scale = { 8, { 0.0028926217928528786, 0.0019037006422877312, 0.0018908268539234996, 0.0028608846478164196, 0.003062910633161664, 0.0023983772844076157, 0.002219499321654439, 0.0020358392503112555, } };
const TfArray<8, int> quant3_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int32_t tensor_data4[8] = { -27385, 5339, 1823, -20928, -32514, -28134, 1608, -18371, };
const TfArray<1, int> tensor_dimension4 = { 1, { 8 } };
const TfArray<8, float> quant4_scale = { 8, { 8.1532234617043287e-06, 5.3658231990993954e-06, 5.32953663423541e-06, 8.0637682913220488e-06, 8.6332038335967809e-06, 6.760132237104699e-06, 6.2559420257457532e-06, 5.7382726481591817e-06, } };
const TfArray<8, int> quant4_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int8_t tensor_data5[16*3*3*8] = { 
  /* [0][0][][] */ -35,-111,-42,-5,-53,22,-95,-73, 41,-109,-111,6,66,-3,-89,-98, 28,0,-30,22,4,32,0,8, 
  /* [0][1][][] */ -2,-66,10,14,1,4,6,13, 8,-55,-87,32,-35,20,-101,-68, -1,6,4,4,31,50,8,-42, 
  /* [0][2][][] */ 20,-127,-98,8,-51,-11,-103,-35, 46,-116,-98,-13,70,4,-107,-51, 9,7,-35,48,-21,34,9,38, 
  /* [1][0][][] */ -17,20,-14,-25,45,10,2,10, -35,1,-70,-40,57,-24,-39,33, -16,22,-12,-8,-23,-29,-66,-41, 
  /* [1][1][][] */ -27,-11,-39,-1,15,6,-14,39, -85,41,16,-25,-65,-96,-63,23, -36,33,-36,-52,-49,-91,-24,16, 
  /* [1][2][][] */ -20,-71,-2,6,-50,-76,-103,-65, -75,45,-127,-41,-51,-22,-12,10, -52,20,11,-15,24,-26,42,-45, 
  /* [2][0][][] */ -25,20,-69,19,38,64,-13,-31, 10,-112,-88,29,14,50,-92,-106, -76,11,19,-34,16,14,35,-26, 
  /* [2][1][][] */ 36,37,18,-42,-13,-31,-5,-4, 30,-127,-109,36,1,-28,-93,-110, -29,8,-7,30,-29,23,-3,-17, 
  /* [2][2][][] */ 7,2,-36,-15,-7,36,-15,-16, 13,-103,-122,35,4,-16,-123,-116, -45,36,26,-52,-37,60,39,3, 
  /* [3][0][][] */ -79,-42,-92,-67,-75,-74,-28,56, -59,-80,24,15,13,-39,-34,-77, -119,-126,-46,-49,-71,-4,21,-52, 
  /* [3][1][][] */ -56,-35,-85,-2,24,-51,-23,60, -51,-15,-14,-29,-65,-37,-16,-64, -14,6,-8,-8,-25,-48,58,-41, 
  /* [3][2][][] */ -114,-40,-16,8,-87,-1,-127,-125, -99,6,-8,-5,-79,-107,11,-51, -94,-96,-13,-16,-32,-4,-50,36, 
  /* [4][0][][] */ -1,-15,31,-38,2,-65,18,14, -5,-58,-53,22,-44,31,-30,-71, 6,-18,-48,20,49,-4,-110,-64, 
  /* [4][1][][] */ -27,12,13,-99,-31,-70,20,-15, 21,-15,-25,-16,-55,1,-34,-38, 57,-126,-106,-2,-50,-9,10,-53, 
  /* [4][2][][] */ -35,38,33,-89,-51,-113,29,17, 7,-38,-43,29,-127,27,-13,-73, 19,-54,-86,33,22,45,-20,-77, 
  /* [5][0][][] */ 7,-53,-68,-10,-55,14,-43,-1, -69,-127,-73,-38,33,12,-86,-34, -25,-77,-70,12,-16,6,-83,-95, 
  /* [5][1][][] */ -18,-33,-17,-18,-113,14,-31,-12, -8,-44,-62,28,-70,34,-49,-44, -11,-76,-76,-82,-70,85,-4,5, 
  /* [5][2][][] */ -87,-70,-65,-56,-33,18,-73,11, -1,-64,-54,-77,43,0,-28,-27, 7,-58,-71,2,-27,-12,-7,-95, 
  /* [6][0][][] */ 0,9,0,-31,7,20,-3,2, 19,-36,-53,18,-10,32,-22,-83, 16,-60,-77,-1,-6,-32,-97,-24, 
  /* [6][1][][] */ -3,5,-3,-25,-16,13,17,4, -38,-53,-16,10,-6,3,-13,-110, -18,-127,-1,34,50,-35,-75,-33, 
  /* [6][2][][] */ -16,2,0,17,-5,-6,8,13, 9,-34,-34,6,-47,43,-41,-71, -10,-64,-81,35,-32,-11,-89,-7, 
  /* [7][0][][] */ 10,-18,-13,-23,-45,3,2,-4, 6,-12,-95,15,-2,24,-85,-69, -1,-86,-50,-21,30,-29,-46,-11, 
  /* [7][1][][] */ -18,2,22,14,1,7,22,-4, -23,-88,-78,25,51,-57,-86,-63, 28,-89,-62,-3,9,8,-127,-82, 
  /* [7][2][][] */ 15,15,13,-52,-65,-62,6,13, 2,-39,-61,-30,6,61,-69,-58, 13,-48,-52,7,-4,-61,-90,-73, 
  /* [8][0][][] */ -60,1,-8,7,9,31,12,-19, 32,-72,-127,18,43,-8,-64,-73, -102,7,-3,-20,-18,22,20,26, 
  /* [8][1][][] */ -35,-27,-22,14,19,-24,-27,-20, -4,-67,-57,21,31,2,-108,-70, -109,-7,19,-32,-71,0,-9,35, 
  /* [8][2][][] */ 11,2,10,17,-35,30,-20,-29, 50,-122,-111,-8,-22,27,-125,-112, -81,38,-8,-57,-37,-12,-3,12, 
  /* [9][0][][] */ 42,-121,-95,16,27,38,-127,-106, 56,0,-39,9,-5,25,-1,-64, -21,-99,-83,35,48,46,-64,-89, 
  /* [9][1][][] */ 10,-31,-61,53,38,5,-53,-54, -36,26,18,56,41,30,9,39, -6,-66,-68,1,18,26,-75,-38, 
  /* [9][2][][] */ 65,-101,-102,20,59,19,-85,-110, 67,-32,-67,-1,-3,8,-23,-49, 55,-101,-117,10,46,26,-76,-60, 
  /* [10][0][][] */ -54,9,4,-44,18,-102,-2,-7, -60,23,18,-85,-103,-99,23,-37, -71,-1,-16,-99,-78,-46,5,20, 
  /* [10][1][][] */ -32,27,-20,-21,-29,29,11,-1, -11,-5,46,-62,14,-53,-8,-41, -101,15,32,-63,-66,-84,13,6, 
  /* [10][2][][] */ -7,-20,1,-75,-57,-23,-32,0, -97,-5,-18,-87,-54,-85,16,9, -75,15,13,-108,-127,-106,13,9, 
  /* [11][0][][] */ -51,-61,-39,29,-23,27,-51,-16, -70,2,-54,-62,-20,-50,23,-49, -24,17,-30,-53,1,-58,12,37, 
  /* [11][1][][] */ -41,-127,-126,-1,7,31,8,-30, -17,28,-6,75,-6,-40,9,14, -25,-8,4,-41,-59,-99,-26,14, 
  /* [11][2][][] */ -18,-69,-85,29,-1,4,-92,-68, -14,-41,-3,-17,-34,65,-4,-53, -85,32,58,-18,-3,-66,3,-58, 
  /* [12][0][][] */ -14,-25,-36,7,-19,23,-84,-4, -78,-47,-10,55,6,-21,-32,-12, 40,-90,-88,5,2,2,-74,-83, 
  /* [12][1][][] */ -14,5,-55,39,-10,60,-6,-39, 42,-48,-1,-97,-31,-15,-1,-22, 59,-33,-66,-52,0,-34,-29,14, 
  /* [12][2][][] */ -20,24,-51,-6,24,3,-2,6, 37,-115,-19,-22,25,-19,-83,-113, -29,-65,-68,-4,0,29,-127,-36, 
  /* [13][0][][] */ -83,-11,-7,-92,-76,-106,8,8, -55,19,26,-90,-111,-127,19,-6, -58,8,2,-44,-96,-48,-17,-62, 
  /* [13][1][][] */ -31,-23,-23,-28,-13,-30,9,6, -67,14,-21,-57,-38,-43,-27,9, -64,-6,-6,-20,-43,1,-5,-13, 
  /* [13][2][][] */ -80,7,-1,-90,-107,-78,9,-1, -76,0,8,-55,-48,-22,-6,10, -77,14,-4,-84,-45,-60,7,-17, 
  /* [14][0][][] */ -75,-9,12,-65,-72,-72,-5,-66, -43,3,-14,-64,-76,-103,8,18, -127,-10,-15,-112,-85,-81,-14,10, 
  /* [14][1][][] */ -105,-19,31,-99,-95,-85,6,11, -103,26,-8,-59,-110,-67,16,20, -50,1,-1,-80,-97,-100,5,-13, 
  /* [14][2][][] */ -36,-22,-1,-78,-23,-72,14,-1, -55,18,0,-32,-33,-68,-12,12, -24,-21,20,15,-50,19,-10,4, 
  /* [15][0][][] */ -33,10,-56,-4,13,5,-2,-5, -114,24,57,-70,-107,-122,10,7, -70,-127,-72,-32,-95,-68,-79,-79, 
  /* [15][1][][] */ 3,4,-4,-50,2,-33,-5,-12, -59,18,-26,-99,-74,-43,32,-54, -113,-42,-21,-120,-78,-81,8,0, 
  /* [15][2][][] */ -30,11,29,-10,3,-72,-2,-10, -62,-2,-8,-74,-55,-59,-4,31, -51,-31,-85,-7,-65,-9,-71,-116, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 16,3,3,8 } };
const TfArray<16, float> quant5_scale = { 16, { 0.005434288177639246, 0.0064816605299711227, 0.0050475941970944405, 0.0027536237612366676, 0.0060294833965599537, 0.0050667440518736839, 0.0064496807754039764, 0.0058058626018464565, 0.0056094769388437271, 0.0061702863313257694, 0.0061489096842706203, 0.0063614277169108391, 0.0059444308280944824, 0.0073183467611670494, 0.0070559070445597172, 0.0069927466101944447, } };
const TfArray<16, int> quant5_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int32_t tensor_data6[16] = { 1011, -17090, 3152, -23869, -1260, -27438, -49, 4269, 461, -63592, 1962, -10454, 2248, 4026, 6382, 357, };
const TfArray<1, int> tensor_dimension6 = { 1, { 16 } };
const TfArray<16, float> quant6_scale = { 16, { 1.6963032976491377e-05, 2.0232386304996908e-05, 1.5755973436171189e-05, 8.5953870438970625e-06, 1.8820923287421465e-05, 1.5815750884939916e-05, 2.0132561985519715e-05, 1.812289519875776e-05, 1.7509881217847578e-05, 1.9260438421042636e-05, 1.919371061376296e-05, 1.9857081497320905e-05, 1.8555434508016333e-05, 2.2844087652629241e-05, 2.2024885765858926e-05, 2.1827732780366205e-05, } };
const TfArray<16, int> quant6_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int8_t tensor_data7[3*1280] = { 
  14, -19, -1, 0, -10, 2, -2, -7, 7, 9, -15, 2, -6, -102, -91, -93, 25, -20, -10, -16, 30, -2, 16, 44, -11, -9, -56, -31, 19, -2, 3, -3, 21, 5, -7, -15, 7, 39, -4, -8, 27, -2, -37, 35, -11, -14, -8, -28, 53, -14, 37, -19, 31, 8, 32, 40, 42, 8, -52, 4, 16, -83, -103, -75, 29, -22, 29, -4, -2, 23, 13, 37, 29, 13, -65, 21, 5, -51, -49, -53, 16, 29, 10, -17, 0, 11, -3, 8, -17, 60, 7, 8, 14, 13, -21, 20, 7, -2, 30, 0, -10, 18, 12, 8, -8, 64, -8, 1, 17, 8, -8, -5, -16, -10, 5, -9, 11, 6, 1, -6, -3, 84, -11, -5, 20, 4, 24, -29, -20, -5, -9, 13, -15, 1, -29, -3, 20, 34, 37, -5, -7, 29, 7, 29, -55, 3, -64, 6, -18, -15, -33, -33, -34, 37, 92, -29, -54, 72, 70, 47, 1, 9, 0, -14, -31, -27, 2, -16, 10, -44, -16, 17, 13, -127, -92, -6, -5, -20, -5, -12, 18, 17, 9, 25, -77, -4, -51, -20, 9, 24, -13, 8, 14, 17, 21, -17, 28, 11, -11, 2, 7, -11, -37, 5, -18, -20, -14, -1, 28, -15, 29, 3, 19, 22, 35, 11, 19, 0, -74, 5, 20, -80, -97, -74, 6, -17, 35, -19, -16, 24, 21, 15, 25, 53, -33, 9, 29, -40, -66, -27, 18, -5, -1, -14, 1, 23, 18, -35, -67, 39, 10, 19, 18, -10, 10, -25, 15, 6, 13, -15, -21, -19, 14, 18, -26, 33, -1, 3, 0, 11, 13, -6, 2, 8, -6, -5, 0, 10, -5, 14, -28, 65, 21, 20, -12, -9, 1, -13, -21, -11, -4, -10, -49, -21, -11, -2, 12, 13, 19, 5, -13, -2, 22, -9, -56, 8, -48, 11, -44, -20, -34, -34, -59, -5, 83, -22, -45, 66, 43, 46, -5, 10, 0, -2, 10, 5, 3, 5, 17, -55, -13, 5, -8, -98, -77, -76, 3, -58, 3, -5, 23, -20, 17, 9, -36, -7, -53, -3, 17, -5, -4, 41, 9, -14, 9, -4, -1, 36, 6, 6, 10, -4, -33, 8, 6, -26, -52, -14, 40, -17, 13, 9, 14, 12, 16, 11, 34, 7, -68, 31, 17, -73, -68, -26, 13, -19, 21, -1, 9, 17, 11, 3, 56, 66, -44, 24, 19, -45, -27, -8, 7, 10, -6, 7, 10, 28, 20, 2, -38, 51, 6, 10, 1, 5, -7, -26, 23, -8, 26, -13, -6, 32, 36, 21, 11, 50, -16, 3, 15, -7, -9, -7, -1, -23, 1, -15, -27, 21, 0, -4, 15, 48, 2, -11, 1, 19, 12, 8, -8, 3, 5, -19, -31, -3, -21, -25, 36, 16, -3, 1, 4, 25, 20, -44, -34, -26, -45, -10, -20, -10, -31, -28, -38, 1, 81, -21, -22, 66, 58, 24, 9, 3, 3, -9, -7, -31, 5, 4, 2, -14, -22, 22, 1, -127, -91, -62, -30, 5, 9, -17, 17, -19, 21, 6, -37, -8, -23, -51, -8, 10, -6, 26, 20, 4, 11, -1, -11, 9, -6, -22, 11, 23, -30, -7, 9, -39, -28, -17, 44, -72, 21, -15, 21, 33, 18, 11, 15, -1, -79, -3, -1, -59, -61, -35, 19, -21, 9, -2, -7, 12, 23, 24, 28, 34, -61, 10, 2, -47, -16, -28, 1, 15, -15, -2, -4, 10, 33, 11, -29, 33, -4, -1, -10, -9, -4, -37, 6, 11, -10, -7, -8, 6, -3, 0, 6, 41, 2, 7, 19, 14, 3, -16, 6, -4, 1, -7, 2, -23, 12, 24, -15, 73, -15, 3, 28, 6, 7, -11, -8, -10, 6, -9, -33, -8, -12, -21, 19, 36, 32, 25, -20, 17, 25, 10, -29, 32, -31, 3, 10, -13, -24, -34, -25, 20, 87, -42, -13, 50, 53, 62, 8, -21, 8, -6, -37, 13, 20, 1, 7, -36, 5, 3, 2, -127, -112, -58, 6, -15, 4, 1, 30, 2, 13, -5, -55, -27, -25, -38, -3, 4, 4, 40, 27, -12, 16, -10, -27, -4, 8, -7, 1, -19, 5, 26, 14, -31, -47, 16, 25, -32, 34, -5, 15, -1, 27, 14, 27, -18, -58, 3, 8, -67, -55, -69, 23, -15, 22, -16, 5, 10, 14, 17, 9, 49, -24, 20, 5, -14, -36, -27, 18, -5, -8, -6, 7, 19, 12, 15, -15, 14, -13, 23, 12, 5, 13, -42, 12, -6, 3, 2, -11, -5, -2, 8, -24, 18, -7, -11, 20, 17, 3, 2, 7, 6, 6, -8, -10, 28, -13, 0, 16, 50, 5, -17, 0, 8, 26, -16, -28, -21, -21, -11, -26, -14, -29, -12, 39, 30, 36, 8, -24, 26, 3, -18, -54, 6, -63, -5, -36, -8, -25, -37, -79, 11, 67, -45, -48, 60, 81, 48, 0, 4, 13, -5, -15, 2, 9, -10, 9, -8, 0, -8, -4, -121, -82, -33, 18, -19, -20, -15, 2, 13, 6, 8, -37, -29, -38, -20, 24, -12, -34, 8, 19, -7, 31, -5, 6, 2, -24, 8, 6, -16, -17, -1, -3, -39, -53, 36, 27, -37, 14, -8, 19, 29, 10, 3, 28, -20, -92, 6, 27, -83, -74, -80, 4, -9, 30, 2, -3, 27, 20, 30, 34, 8, -20, 44, 39, -47, -33, -16, 1, 0, 25, -4, -1, 16, -10, -3, -24, 32, 1, 5, 6, 15, 15, -5, 2, -2, 8, -8, -1, 8, 1, 12, -18, 62, -1, -15, 9, 1, -5, -17, 11, -13, 2, -20, 10, 15, -7, 7, 17, 28, 11, 8, 5, -6, 11, -5, -18, 22, 4, -3, -42, 3, -26, -13, -18, 47, 25, 15, -1, 25, 11, 11, -58, 15, -41, -2, -45, -15, -31, -34, -42, 19, 70, -14, -20, 57, 90, 59, 12, 17, 14, -12, -22, 15, -10, 7, 3, 33, 2, 0, -12, -85, -98, -37, -2, -26, 1, -31, 19, -24, 34, 34, -21, -14, -41, -39, 12, 12, 1, 24, 23, -11, 8, -7, -26, -3, -13, -12, 35, -1, -16, 23, 33, -32, -30, -36, 36, -35, 41, -12, 14, 13, 18, 14, 25, -5, -54, -10, 26, -104, -60, -106, 22, -18, 29, -19, -1, 16, 10, 16, 36, 36, -34, 30, -3, -34, -14, -27, 9, 51, 4, -8, 7, 6, -3, 4, -23, 33, 0, 17, 5, 2, 10, -18, 26, -22, 7, -8, 1, -21, 16, 14, 9, 55, -22, 10, 9, -13, -6, 0, 0, 28, -4, -2, -16, 15, -2, 6, -8, 78, 33, 7, 14, 15, 4, -2, -25, 18, 5, -9, -31, -12, -11, -15, 32, 42, 19, 4, -3, 10, 5, -16, -38, 41, -42, -10, -26, -67, -46, -44, -54, -4, 69, -23, -31, 41, 81, 43, 8, 25, 15, -3, -31, 0, 1, 25, 23, 5, -7, 0, 10, -56, -65, -22, -10, 14, 36, 0, 39, -23, 26, 7, -39, -1, -51, -8, -13, -1, -23, 2, -9, -28, 15, -4, -11, 8, 3, -37, 18, 5, -30, 12, 11, -35, -46, 4, 19, 16, 36, -17, 43, 1, 49, 33, 7, 5, -40, 50, 19, -49, -54, -66, 17, 16, 29, -22, 0, 19, 12, 27, 30, 15, -31, 16, 58, -2, -31, -31, 33, -18, 24, 8, -6, 20, 24, 25, -53, 20, 3, 33, 3, 11, 20, 5, 10, -55, 3, -20, 3, 28, 1, -11, -23, 33, 7, 5, 0, -2, 17, -9, 6, 31, 8, -1, 15, 29, 30, 2, -24, 14, 28, 20, -14, 12, 10, -38, -18, 7, -20, -2, -22, -3, -56, -20, 2, -11, 30, -29, -31, 15, 21, 12, -71, -10, -36, -7, -15, -58, -32, -40, -57, 5, 71, -61, -51, 55, 58, 66, 
  -46, -27, -29, -17, 23, 2, -21, -7, -38, -36, 7, -31, -14, 50, 40, 38, -14, 6, 1, -16, -54, -2, -22, -42, 14, 7, 12, 30, -10, -4, -3, -5, -8, 9, 17, 22, -7, -11, 27, 8, -27, 2, 25, -13, 38, 5, 1, -3, -21, -45, -23, 17, -49, -35, -14, -27, -25, -3, 6, -17, -22, 16, 23, 11, -27, 11, -22, 10, -20, 8, -11, -42, -19, -14, 27, -9, -24, 9, 18, 20, -27, 19, -33, -7, -31, -19, -36, -34, 18, 0, 24, 6, -43, 7, 29, -1, -57, 18, -18, 13, -20, -32, -56, -40, -15, -11, 11, -11, -48, 15, 11, 45, -42, -8, -38, 13, -11, -23, -65, -14, -26, -20, 24, 10, -54, 9, 11, 18, -8, -8, -22, 13, 10, -37, 24, -20, -49, -25, 11, 9, -42, -13, -1, 20, 43, -21, 53, 4, 80, 4, 61, 64, 33, -4, -91, 14, 63, -58, -54, -49, -35, 0, -21, -2, 6, 5, -9, -11, -18, 47, 15, -28, -14, 44, 48, 4, 18, -15, -4, -6, 10, 3, -31, -33, 21, 9, 13, 19, -2, -3, -8, -8, -8, 28, 1, 14, -24, -6, 40, 4, -8, -10, -5, 30, 42, 10, 16, 2, -18, 13, -9, 0, -16, -7, -14, -15, -24, -14, 12, 11, -15, 9, 20, 30, -3, -4, -28, 22, -5, -8, -10, -13, -14, -10, 1, -12, 13, 15, 17, 15, -29, 12, -25, 1, -44, -4, -26, -13, 54, 12, 3, 28, -67, 21, 10, 5, -55, 30, -5, 34, -15, -1, -29, -55, 20, -25, 5, -16, -81, -2, 11, 26, -32, 0, -27, 7, 1, -41, -38, -28, 39, -45, 1, -30, -43, 5, 14, 2, -12, -10, 8, -1, 38, 1, -7, -18, -19, -23, 1, 2, -7, -12, -10, 14, 42, -28, 41, -6, 75, 2, 51, 44, 41, -38, -72, 7, 48, -90, -70, -71, -24, -8, -38, 6, -24, -7, -8, -26, -45, 0, 13, -41, 10, 38, 36, 40, -1, 12, 6, 4, -45, 0, -31, -26, -1, 2, 16, 25, -5, -8, 1, -30, -11, -6, 41, -21, -10, -4, 5, -10, -14, -24, 12, 0, 18, 4, 11, -5, -11, 8, 6, 6, -13, 16, 3, 9, -26, 5, 23, 11, -3, 17, 7, 17, 8, 27, -17, 10, -33, 13, -4, -18, -32, 12, 17, -3, -27, 13, 17, 11, -19, -4, 22, -7, -48, -6, -33, -57, 12, 13, 9, -5, -32, 12, 0, 8, -71, 2, -22, 5, -23, -53, -64, -66, 6, 12, 13, -49, -65, 4, 14, 11, -46, 11, -44, 40, -3, 7, -60, -43, -23, -22, 17, -10, -53, 0, 9, 15, 4, -9, -3, -5, 17, -26, 11, 10, -18, -59, -8, 10, -12, 1, -17, 7, 42, 20, 51, -2, 55, 9, 41, 43, 43, 10, -76, 8, 23, -68, -69, -54, -37, -6, -25, 18, 12, 11, -7, 2, -23, -19, 2, -24, -17, 42, 43, 12, 6, -2, -25, 30, -7, 0, -28, -24, -3, -1, 14, 48, 9, 1, -4, -12, -19, 8, 44, -8, 12, 0, 11, 9, -18, -14, -2, 16, -18, 6, 2, 4, 0, 27, -1, 15, -4, -5, 5, 19, -17, -3, 5, 18, -17, 19, 18, 12, 9, 9, 4, 0, 0, 29, 8, 9, -17, 17, 22, 14, -10, 6, 16, -5, -38, 0, -9, 4, -40, 22, -46, -24, 41, 37, 14, 2, -6, 7, 16, -17, -58, -17, -51, 14, -15, -20, -31, -48, 3, -28, 5, 12, -44, -4, 22, 23, -53, 33, -27, 10, -23, -17, -51, -33, -26, -8, 7, 9, -51, 3, 18, 3, -7, -3, -8, -5, 27, -28, -5, 11, -40, -54, -12, 14, 2, -4, -9, 46, 21, -30, 35, 10, 57, -2, 37, 51, 22, 5, -79, 32, 29, -75, -66, -84, -27, 5, -28, 11, 34, 17, -20, -15, -28, 6, 13, -51, -4, 42, 40, 10, 35, 14, -14, 31, -23, 8, 3, -6, 48, 11, 12, 68, -8, 7, 9, -20, -22, 13, 9, -4, 18, -27, 8, 12, -16, -10, -3, -21, 0, 7, 6, -6, 8, 66, 0, 4, 5, 2, -1, -10, -14, 2, 23, 1, 8, 15, 23, 8, -1, -25, -23, 8, -20, -14, 13, -25, -29, -18, 17, -38, -26, 4, 15, 3, -12, 16, -11, 4, -47, -2, -19, -59, 48, 29, 15, -14, -34, 11, 0, 30, -52, -10, -32, 1, -10, -26, -51, -60, 3, -37, 4, -8, -70, -1, 9, 1, -17, -1, -46, 9, 16, -5, -38, -21, 2, -33, 11, -2, -43, 20, -4, 18, -24, -28, -12, 3, 30, 20, 5, -5, -13, -67, -24, 3, 2, -12, 8, 24, 32, 26, 51, 7, 62, -6, 51, 54, 48, -45, -80, 29, 40, -85, -64, -69, -27, -19, -42, -1, 19, -22, -22, -11, -24, -7, 25, -32, 0, 57, 35, 13, 1, 37, -14, 7, -17, 9, -33, -10, 28, 6, 22, 54, -25, -9, 10, -16, -23, 7, 7, 2, 27, -34, -11, -11, -2, -21, -4, 12, 34, 13, 7, -10, 2, 28, 2, 2, -30, -30, -12, 16, -11, -28, 19, -20, 1, 10, 2, 11, 0, 16, -7, -8, -21, -12, -17, 3, -39, -32, 16, -32, 5, 17, 5, -7, -44, -19, -23, 8, -19, -3, -25, -9, 40, 29, 13, -18, -23, -1, 14, 1, -60, 4, -32, 26, -22, -29, -50, -31, 11, -8, 17, -8, -67, 12, 4, 24, -72, 8, -31, 23, -14, 0, -36, -25, 1, -27, 16, -39, -71, -2, 18, 14, -11, -9, -6, 12, 51, -15, 13, -8, 4, -12, -4, 15, -10, -10, 8, 24, 52, -29, 48, -13, 55, 26, 52, 56, 30, -48, -89, 23, 40, -85, -79, -70, -20, -12, -21, -3, 19, -50, 7, -34, -21, 22, 12, -29, -20, 34, 48, 13, 12, 12, -8, 10, -24, 2, -55, -45, 20, -8, -2, 32, -17, -9, -2, -14, -18, -17, 27, 24, 8, -6, 7, 17, -14, -9, 1, -34, -4, 15, 9, 9, -16, -2, -21, -5, -36, -9, -29, -12, -24, -24, 8, 18, -29, 20, 5, 23, 10, 22, -21, 4, -2, 9, -35, -8, -37, -19, 13, -1, -17, 14, 12, 7, -18, 1, 3, -4, -46, 6, -21, -24, -9, 10, 16, -21, -24, 8, -5, 14, -68, 34, -33, 6, -16, -24, -38, -70, 18, -39, 15, 12, -107, 20, 13, 26, -59, -13, -8, 17, -18, -24, -38, -39, -1, -14, 3, 0, -48, 11, 12, 9, -14, -33, -42, 26, 33, 3, 8, -4, -34, -5, -5, 21, -20, 6, -1, -7, 27, -31, 45, -1, 49, 16, 51, 55, 43, 3, -85, 9, 31, -71, -65, -65, -18, -33, -18, 13, 54, 13, -10, -22, -25, -1, 7, -12, -1, 28, 28, 3, 33, -25, -24, 7, -50, 3, -9, -18, 24, -4, 11, -1, -2, 8, 17, 9, 20, -20, 20, 10, -3, -5, 17, 13, 10, 3, 10, 43, -19, 11, 24, -3, -12, -2, -12, 14, -30, 6, -23, -28, 1, 12, 21, 5, 21, 13, 16, 32, -12, 33, -12, 0, -28, -8, 0, -28, -11, 1, 5, -21, -15, 8, 6, 5, -28, 7, 9, 1, -50, -8, -29, -29, 30, -2, 6, -16, -39, -6, 11, 15, -48, 18, -12, 4, -5, -12, -48, -31, 11, 6, 0, -3, -49, -1, -13, 36, -32, 2, -16, -4, -13, -40, -49, -4, 31, -10, 11, -25, -61, 6, 25, 10, -7, 41, 15, 7, 20, -2, 41, 23, -11, -7, -18, 51, -16, -15, 4, 10, 37, -28, 37, 6, 61, 12, 48, 54, 40, 5, -59, 14, 58, -40, -43, -78, 
  8, 28, 15, 21, 1, 1, 14, 15, 20, -6, -2, 15, 11, -4, 0, 6, -33, 23, 7, 24, 5, 1, -8, -18, -11, 5, 11, 3, -9, 6, 4, 12, -17, -1, 5, -12, -7, -25, -18, 5, -15, -5, 0, -26, -10, 1, 3, 30, -55, 53, -26, 2, -16, 3, -21, -25, -31, -5, 21, -12, -13, 23, 27, 27, -14, 14, -16, -8, 13, -16, -10, -18, -21, -8, 10, -24, 4, 11, 3, 16, -2, -34, 13, 9, 21, -17, 13, 13, 10, -66, -18, -5, 9, -9, -8, -16, 6, -10, -10, -9, 16, -5, 13, 12, 22, -62, -16, 14, 3, -13, -11, -27, 22, 20, 9, -5, -3, 6, 26, 21, 8, -73, -24, 4, -3, -9, -18, -7, 15, 1, 20, -22, 8, 18, 6, 24, 17, -27, -17, 1, 34, -10, -11, -34, 13, 13, 14, -8, -43, 6, -8, -5, 17, -27, 19, 25, 9, 11, 3, 17, 17, 4, 19, 11, 13, 30, 11, 19, 6, 19, -2, 13, 5, 6, 0, 2, -5, 15, -3, 11, -13, -14, -1, -14, 29, -3, 11, -5, -3, -11, 8, 5, -10, -32, -23, -7, -13, -9, -3, 7, -10, 15, 24, -22, -11, 1, 1, -8, -27, -2, -17, 6, -22, -21, -21, -8, -9, 9, 27, -23, -14, 26, 26, 1, -7, 1, -21, 3, 21, -16, -20, -1, -23, -61, 16, 8, -33, 4, 13, 1, -10, -5, 9, 11, 23, -20, -10, 27, 17, -42, -3, -32, -3, -11, -14, 15, 4, -28, 2, -9, 19, 33, 2, 2, 22, -33, 8, 15, 34, -6, -24, -21, 13, 2, 17, -9, 6, -9, 14, 0, -5, -60, -7, -13, 23, 5, -14, 2, 32, 10, 4, 5, 17, 22, 6, 10, -9, -20, -16, -1, 9, 0, 1, -8, 19, 15, 20, 4, -12, 21, 5, 3, 10, 21, 12, 10, 6, 30, 36, 31, 15, 14, 15, -7, -3, -1, 4, 0, 17, 51, -9, 7, 2, 4, -5, -8, -12, 21, 3, 2, -6, 22, 5, 4, 15, 12, 15, -11, -11, 4, 7, 3, -10, 13, -25, 27, 6, -30, -3, -12, 3, 9, 16, -2, -28, 3, 11, 12, -31, 10, -20, -11, -8, -26, -19, -17, -24, -15, 21, -43, -10, 20, 32, -1, -12, -10, -4, 7, -5, -24, -7, -4, -33, -67, 11, -14, -14, 14, 8, -3, 13, -10, 7, 12, 12, -31, 4, 14, 25, -54, -16, -9, 10, -7, 6, 0, -7, 8, -10, 1, 1, -18, -14, -5, -6, -61, -11, 7, 6, 6, -13, -7, 18, -5, 20, -19, 18, -13, 15, 12, -1, -41, -21, 14, 21, -13, -12, -20, 4, 3, -6, 13, 15, 16, 14, 14, -15, -2, 2, -5, 4, -17, -10, 10, 13, 11, 7, 3, -28, 3, 4, 4, 3, 0, 13, 10, 13, 25, 11, 32, 7, 13, 12, -18, -6, 27, 9, -1, 6, 19, 1, -7, 14, -1, -2, 11, 22, 4, 6, -10, -13, 28, -13, -2, 25, 17, 7, 12, -3, -7, 4, -16, -14, -6, -18, 12, 20, -11, -1, 7, 2, -4, 21, 1, -6, 18, 14, 5, -38, 12, -24, -15, -17, -26, -19, -17, -12, 3, 19, -13, 5, 11, 18, 10, -13, -5, -4, 3, 2, -33, -20, -28, -16, -34, 4, -17, -4, 17, 3, 24, -1, -13, 6, -3, 20, -20, -15, -5, -4, -46, 0, 3, 1, -8, -11, 41, 4, 5, 33, 1, 10, 2, 14, 12, -7, -46, -8, -10, -14, -12, -14, -14, 8, -31, 6, -1, 22, 30, 1, -6, 22, -75, 3, -1, -11, -18, -25, 13, 13, 3, 0, 17, 18, 9, 10, 14, -8, -27, 2, -23, 14, -18, -2, -58, 11, 0, 8, -2, -42, 14, 7, -6, 16, -21, 13, 20, -4, 23, 15, 17, 10, 6, 15, -9, 7, -17, 2, 8, 8, 23, -16, 24, 4, 0, 15, 19, -19, -14, 7, -25, -13, -7, -9, 6, 13, 27, 20, -11, 11, -5, -9, -20, -15, 3, -22, 9, 1, 12, -9, -13, -4, 24, 0, -17, -11, 13, 27, 13, -33, -32, -37, -5, -24, -6, -26, -12, -17, 5, 17, 8, -28, 7, 16, 28, -21, 20, -4, 9, 1, -1, -15, -16, 17, -37, 4, -8, 6, 3, 15, 0, -4, -9, 8, -7, 13, -16, 3, 3, -11, -7, -17, -21, -10, -9, 2, -1, 5, 18, 8, 0, 17, 3, 22, 5, 15, -4, 4, 16, 0, -14, -27, -14, 8, -16, 16, 5, 4, -22, 25, 4, -12, -45, -18, 16, 10, -19, -5, -3, 27, 26, 9, 7, 5, 19, 18, 14, -36, -12, 1, 1, 16, -8, -3, -15, 26, -21, 9, -10, -17, 10, 4, -15, 18, 14, 24, 24, 24, 25, 3, 19, 13, 5, 6, 9, -5, 20, -3, 16, 5, 9, -22, 21, 0, -3, -10, 12, -23, -32, 35, -2, 10, -16, 12, -12, -8, 34, 9, -23, -12, 14, 16, 10, -5, -12, -31, -3, -14, 21, 20, 5, -8, 25, 17, -5, -10, 12, 12, 0, -26, -15, -9, 9, -12, -11, -10, -7, -11, 27, 26, -4, -24, 30, 27, 18, -2, -18, -24, 2, 12, -31, -7, -29, -19, -8, -8, -26, -31, 0, 18, 4, 4, 6, -4, 2, 14, -23, 11, 7, -10, -33, -6, 5, 4, -12, -9, 1, 17, -4, 0, -25, 19, -5, 11, 5, 6, -55, -15, 22, 4, -8, -3, -17, 12, 10, 22, -9, 2, -7, 13, 12, -8, -18, -16, 14, 23, -6, -18, -8, 26, -13, 7, -11, 4, 11, 15, 25, 10, -37, -5, -23, 7, -9, -11, -29, 13, 0, 5, 8, -19, 7, -4, 3, 14, 5, 24, 2, 2, 29, 19, 22, 5, -4, 1, 12, 4, -2, 12, 13, 8, -41, -10, 17, 10, 7, 3, -1, -7, 7, 18, 3, -6, 22, 3, -3, -8, 10, 27, -5, 9, -8, 3, -1, -24, 23, -24, -9, 17, 12, 3, 2, -21, -3, 8, -12, -36, 0, 1, 11, -34, 23, -34, 11, -2, -9, -12, -10, -12, 8, 6, 6, -14, 18, 22, 23, -15, -15, -16, 9, 0, -12, -10, -12, -7, -25, 5, -24, -2, 5, -3, -1, 0, -33, 6, 18, 9, -6, 7, 7, 14, -26, -12, -13, 0, -10, -8, -3, 6, -32, 6, -11, 3, 30, -2, 5, -12, -48, -18, -20, 23, -6, -4, -24, 15, -12, 8, -14, 23, -6, 24, 8, 5, -71, -31, 2, -2, -23, -5, -13, 31, 5, 12, -7, -7, 23, 10, 20, -18, -46, -17, 3, 5, -11, 2, 10, 10, -3, 7, 18, -13, 39, 5, -7, 9, 1, 25, 24, 16, 25, 4, 17, 2, 1, 4, 1, -26, -4, 0, -7, 1, -12, -5, 6, -8, 13, 1, 0, -5, 2, -8, -6, -14, 15, -25, 0, 5, 11, 18, 0, 11, -8, -6, 2, -2, 39, -27, 0, 10, -12, -18, 21, -28, 5, 4, -39, 2, 10, 2, -1, -7, -4, -22, 0, -25, 6, -42, -21, -8, -11, 0, -44, -22, 12, 13, -13, -12, -49, -20, 6, 20, -7, -12, -16, -22, -26, 11, -9, -52, -14, 2, 5, -12, 11, -29, -2, 32, -17, -15, -9, 17, -21, -2, -28, 3, 1, -9, -22, 7, 27, 7, 15, 8, -15, 12, 16, 6, -45, -15, -6, 18, -13, -5, -22, 3, -23, 2, 9, -5, -8, 1, 9, 3, -13, -25, -8, 44, -7, -33, -1, 22, -27, 10, -5, 12, 2, 25, -2, 13, 9, -3, 6, 33, 4, -20, -14, 21, 20, -1, -12, -25, 52, 15, -5, 2, -3, 9, 52, 21, -7, -1, 17, 
};
const TfArray<2, int> tensor_dimension7 = { 2, { 3,1280 } };
const TfArray<1, float> quant7_scale = { 1, { 0.010040040127933025, } };
const TfArray<1, int> quant7_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(8) int32_t tensor_data8[3] = { -4375, 5593, -1388, };
const TfArray<1, int> tensor_dimension8 = { 1, { 3 } };
const TfArray<1, float> quant8_scale = { 1, { 6.9507164880633354e-05, } };
const TfArray<1, int> quant8_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const TfArray<4, int> tensor_dimension9 = { 4, { 1,29,40,1 } };
const TfArray<1, float> quant9_scale = { 1, { 0.0028186275158077478, } };
const TfArray<1, int> quant9_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const TfArray<4, int> tensor_dimension10 = { 4, { 1,29,40,8 } };
const TfArray<1, float> quant10_scale = { 1, { 0.0031214819755405188, } };
const TfArray<1, int> quant10_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const TfArray<4, int> tensor_dimension11 = { 4, { 1,15,20,8 } };
const TfArray<1, float> quant11_scale = { 1, { 0.0031214819755405188, } };
const TfArray<1, int> quant11_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const TfArray<4, int> tensor_dimension12 = { 4, { 1,15,20,16 } };
const TfArray<1, float> quant12_scale = { 1, { 0.0069229970686137676, } };
const TfArray<1, int> quant12_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const TfArray<4, int> tensor_dimension13 = { 4, { 1,8,10,16 } };
const TfArray<1, float> quant13_scale = { 1, { 0.0069229970686137676, } };
const TfArray<1, int> quant13_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const TfArray<2, int> tensor_dimension14 = { 2, { 1,1280 } };
const TfArray<1, float> quant14_scale = { 1, { 0.0069229970686137676, } };
const TfArray<1, int> quant14_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const TfArray<2, int> tensor_dimension15 = { 2, { 1,3 } };
const TfArray<1, float> quant15_scale = { 1, { 0.18914701044559479, } };
const TfArray<1, int> quant15_zero = { 1, { 4 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const TfArray<2, int> tensor_dimension16 = { 2, { 1,3 } };
const TfArray<1, float> quant16_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant16_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,1 } };
const TfArray<1, int> outputs0 = { 1, { 9 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 9,3,4 } };
const TfArray<1, int> outputs1 = { 1, { 10 } };
const TfLitePoolParams opdata2 = { kTfLitePaddingSame, 2,2, 2,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs2 = { 1, { 10 } };
const TfArray<1, int> outputs2 = { 1, { 11 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 11,5,6 } };
const TfArray<1, int> outputs3 = { 1, { 12 } };
const TfLitePoolParams opdata4 = { kTfLitePaddingSame, 2,2, 2,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs4 = { 1, { 12 } };
const TfArray<1, int> outputs4 = { 1, { 13 } };
const TfLiteReshapeParams opdata5 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs5 = { 2, { 13,2 } };
const TfArray<1, int> outputs5 = { 1, { 14 } };
const TfLiteFullyConnectedParams opdata6 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs6 = { 3, { 14,7,8 } };
const TfArray<1, int> outputs6 = { 1, { 15 } };
const TfLiteSoftmaxParams opdata7 = { 1 };
const TfArray<1, int> inputs7 = { 1, { 15 } };
const TfArray<1, int> outputs7 = { 1, { 16 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension0, 1160, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 8, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 3840, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 12, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 9280, (TfLiteIntArray*)&tensor_dimension9, 1160, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension10, 9280, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 9280, (TfLiteIntArray*)&tensor_dimension11, 2400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension12, 4800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 4800, (TfLiteIntArray*)&tensor_dimension13, 1280, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension14, 1280, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1280, (TfLiteIntArray*)&tensor_dimension15, 3, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension16, 3, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_SOFTMAX, },
};
static std::vector<void*> overflow_buffers;
static void * AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers.push_back(ptr);
    return ptr;
  }

  current_location -= bytes;

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static std::vector<scratch_buffer_t> scratch_buffers;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
  if (!b.ptr) {
    return kTfLiteError;
  }

  scratch_buffers.push_back(b);

  *buffer_idx = scratch_buffers.size() - 1;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > static_cast<int>(scratch_buffers.size()) - 1) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {
  return &tflTensors[tensor_idx];
}

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {
  return &tflEvalTensors[tensor_idx];
}

} // namespace

TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.GetTensor = &GetTensor;
  ctx.GetEvalTensor = &GetEvalTensor;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 17;
  for(size_t i = 0; i < 17; ++i) {
    tflTensors[i].type = tensorData[i].type;
    tflEvalTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;
    tflEvalTensors[i].dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

     tflTensors[i].data.data =  start;
     tflEvalTensors[i].data.data =  start;
    }
    else{
       tflTensors[i].data.data = tensorData[i].data;
       tflEvalTensors[i].data.data = tensorData[i].data;
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
    tflEvalTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
      tflTensors[i].params.scale = quant->scale->data[0];
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    }
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_RESHAPE] = Register_RESHAPE();
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_MAX_POOL_2D] = Register_MAX_POOL_2D();
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for(size_t i = 0; i < 8; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for(size_t i = 0; i < 8; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  16, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for(size_t i = 0; i < 8; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif
  scratch_buffers.clear();
  for (size_t ix = 0; ix < overflow_buffers.size(); ix++) {
    free(overflow_buffers[ix]);
  }
  overflow_buffers.clear();
  return kTfLiteOk;
}
