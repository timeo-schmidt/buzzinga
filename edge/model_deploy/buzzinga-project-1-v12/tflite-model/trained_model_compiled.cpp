/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 28.02.2022 11:41:05

#include <stdio.h>
#include <stdlib.h>
#include <vector>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

constexpr int kTensorArenaSize = 3440;

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_RESHAPE, OP_CONV_2D, OP_MAX_POOL_2D, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[23];
TfLiteEvalTensor tflEvalTensors[23];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[11];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,1160 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0034620098304003477, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4] = { 1, 1, 29, 40, };
const TfArray<1, int> tensor_dimension1 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data2[4] = { 1, 29, 1, 8, };
const TfArray<1, int> tensor_dimension2 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data3[4] = { 1, 1, 15, 8, };
const TfArray<1, int> tensor_dimension3 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data4[4] = { 1, 15, 1, 16, };
const TfArray<1, int> tensor_dimension4 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data5[2] = { -1, 128, };
const TfArray<1, int> tensor_dimension5 = { 1, { 2 } };
const ALIGN(16) int8_t tensor_data6[8*1*3*40] = { 
  /* [0][0][][] */ -53,-78,10,-4,-8,12,2,-68,-30,-6,-8,3,13,-40,81,-22,40,19,67,127,24,-17,122,60,-14,58,-8,0,-14,-40,35,-37,-54,2,-47,4,7,-17,-15,12, -52,-45,9,-17,-9,-2,1,-48,-26,-9,-4,2,9,-32,80,-12,-4,-10,95,103,7,-1,105,54,8,62,-35,-4,-18,-32,1,-43,-21,1,-47,-2,-5,-27,-23,-4, -58,-81,-8,14,-10,-2,-7,-76,-23,-8,-6,-22,4,-27,85,-25,-4,-8,70,106,11,7,111,70,4,79,-13,10,-14,-34,-8,-24,-40,-4,-45,-4,8,-19,-20,-4, 
  /* [1][0][][] */ -92,-52,-16,22,-36,-3,-16,-81,-14,17,8,10,37,-12,-53,-47,16,20,-24,-63,-31,-2,-10,4,50,-29,30,12,-81,-63,-46,-48,-88,2,-59,-80,-43,-107,-26,-96, -49,-17,39,-36,-15,2,38,-19,-34,-6,4,-50,-11,-89,-4,-27,-31,-19,9,13,8,-32,18,-31,-35,16,-47,-31,-65,-52,-5,-61,0,9,-4,21,-53,-127,-102,-62, -81,-51,32,13,-25,-32,-11,-92,-60,-34,13,-10,-31,-57,-20,26,-44,51,-20,-7,-34,-11,13,-61,47,-65,1,-28,-9,-26,38,-12,-38,33,-41,-114,-38,-65,-118,-85, 
  /* [2][0][][] */ -35,26,-23,-39,-9,7,-12,24,0,7,13,-7,-19,31,-39,4,18,-9,-39,-31,-5,38,-31,-11,8,-19,31,-11,12,60,-21,49,68,-10,40,-39,-45,-18,-19,79, -127,-72,-17,23,-21,1,-19,-68,-72,18,-12,2,36,-58,-95,25,1,3,-116,-97,-26,-19,-105,-51,29,-79,-7,1,-30,18,28,26,50,-37,33,-24,-41,-15,-22,99, 1,58,18,-21,6,-37,14,42,56,-29,2,-20,5,50,-14,-7,17,-3,0,9,22,3,-1,32,-5,46,33,-23,36,91,-14,76,93,-3,101,3,-17,-19,4,89, 
  /* [3][0][][] */ -50,19,-37,9,29,9,-13,-27,31,-14,41,39,-4,0,23,-5,-33,-37,40,29,27,-20,55,48,-2,53,21,-3,26,57,19,8,55,-1,49,73,61,80,106,116, -43,8,30,-43,-4,-16,-8,2,29,-2,-16,10,25,35,45,17,-1,21,43,56,-26,-13,-1,42,-15,13,13,2,18,23,-19,46,46,31,42,57,59,99,97,120, -69,45,-22,44,-33,20,20,-7,-6,39,-28,-25,-28,39,57,-38,-3,-56,35,40,47,-12,41,28,43,28,47,48,31,43,6,34,34,7,36,64,55,95,88,127, 
  /* [4][0][][] */ -23,32,4,-6,2,31,43,17,22,22,-41,-37,6,-2,-6,25,-24,16,-31,-2,12,29,-6,-66,10,-26,-31,24,-24,-34,6,-8,-20,-3,-3,36,24,99,78,36, -85,-73,-22,-18,-7,-15,-10,-87,-59,-2,-18,29,-20,-35,-102,-24,28,0,-124,-127,-8,-12,-117,-102,-33,-77,-113,10,-94,-74,9,-99,-68,-14,-67,18,-29,102,111,23, -19,32,34,1,-8,2,-20,12,21,41,25,8,16,34,17,8,-1,29,-24,-24,13,-32,-44,-3,27,8,-20,-13,-62,-17,9,-32,-25,6,-14,28,50,102,107,43, 
  /* [5][0][][] */ 3,-40,23,40,45,17,-6,-72,-58,1,-66,35,-19,-22,-2,-1,-12,-11,-16,-18,33,33,-28,-74,39,-9,-17,-15,-65,-44,-49,15,-48,-58,44,-60,-26,-78,-127,-95, -12,-85,-25,59,-29,-1,25,-71,-66,-9,-5,-14,1,-81,18,44,23,-13,-51,-37,-5,8,-20,-22,-5,36,-40,67,3,-47,-15,-28,-25,34,-66,-35,-2,-94,-100,-92, -11,1,-13,11,-28,-2,-4,-41,-14,51,20,33,-53,-29,-105,37,6,-15,-86,-13,8,57,-16,3,-26,-69,3,-20,-8,25,34,26,-7,8,-46,-21,-15,-85,-74,-93, 
  /* [6][0][][] */ -103,-69,47,12,-16,2,16,-78,-36,-8,-3,-39,5,-40,13,-8,-9,-15,-35,3,-36,-9,14,-33,-53,-24,-24,-27,-15,-30,30,-30,-78,-11,-12,-21,-14,22,45,77, -80,-53,5,12,-2,-36,-16,-10,-28,26,-4,-5,-19,10,-13,-10,0,11,12,-36,-26,41,1,-35,0,-15,-23,11,-99,-63,-15,-55,-21,22,-47,-45,6,38,26,87, -127,-80,11,48,-2,-6,11,-14,11,44,-26,28,31,-38,-28,-6,-46,-10,7,-17,-12,-32,22,-33,31,-28,-71,32,-18,-65,38,-17,-23,28,-22,2,-9,38,6,125, 
  /* [7][0][][] */ -7,-3,-13,34,-29,-14,-48,28,52,18,-43,33,14,77,87,-21,25,-20,101,1,-14,15,31,-6,-15,-7,32,-18,30,6,21,22,2,27,-32,-49,-82,-125,-89,-97, 20,22,-37,14,12,-3,-1,20,100,-14,-5,-4,19,50,94,-5,14,20,83,-12,-2,11,6,3,16,8,10,-47,24,-6,6,0,-22,-15,-1,-26,-75,-79,-90,-123, -8,-2,46,-12,-3,17,-20,11,82,12,-32,4,-52,91,116,-5,-9,-39,80,4,-36,3,4,-3,-29,8,2,7,-5,-3,-15,-27,-14,28,2,-82,-74,-81,-127,-122, 
};
const TfArray<4, int> tensor_dimension6 = { 4, { 8,1,3,40 } };
const TfArray<8, float> quant6_scale = { 8, { 0.025600086897611618, 0.033514522016048431, 0.018845699727535248, 0.0076409978792071342, 0.023181810975074768, 0.033930171281099319, 0.028367225080728531, 0.025156812742352486, } };
const TfArray<8, int> quant6_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int32_t tensor_data7[8] = { -29708, 12476, -60620, -227611, -7631, 10416, 21460, -12493, };
const TfArray<1, int> tensor_dimension7 = { 1, { 8 } };
const TfArray<8, float> quant7_scale = { 8, { 8.8627755758352578e-05, 0.00011602760787354782, 6.524399941554293e-05, 2.6453210011823103e-05, 8.025566057767719e-05, 0.00011746658856282011, 9.8207608971279114e-05, 8.7093132606241852e-05, } };
const TfArray<8, int> quant7_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int8_t tensor_data8[16*1*3*8] = { 
  /* [0][0][][] */ 5,-63,-18,23,-3,-115,23,-78, 16,-127,-41,-9,-23,-24,-6,-31, 14,-96,-19,-11,-39,-101,10,-22, 
  /* [1][0][][] */ -55,2,-127,-97,-78,-55,-1,1, -89,-27,-67,-29,-87,-32,-77,-3, -45,-18,-9,-12,-2,-6,-122,-8, 
  /* [2][0][][] */ -28,-42,-19,-30,-15,-79,-95,-109, 8,-97,-48,-91,-16,-127,-3,-15, 1,-64,-8,-43,-42,-8,-5,-24, 
  /* [3][0][][] */ -35,-127,8,-7,9,-122,1,-23, -88,8,-4,35,-15,-99,-17,-28, -18,-40,10,23,-3,-38,-20,-21, 
  /* [4][0][][] */ 8,-32,-26,-4,-24,4,-84,11, -2,-36,-45,3,-62,-4,-15,-4, 8,-8,-24,-4,-22,4,-127,14, 
  /* [5][0][][] */ -28,-95,-43,-10,-74,-15,-1,-7, -82,-113,-113,0,-85,-1,-127,-90, -63,5,-38,-14,3,-29,-74,-40, 
  /* [6][0][][] */ -70,10,-38,9,-2,-1,-40,-109, -104,-36,-4,-1,8,-70,-25,-127, -90,-26,-25,11,34,-84,-66,-65, 
  /* [7][0][][] */ 19,-127,-23,3,-14,-79,6,-43, -12,-99,-6,5,0,-87,9,-33, 16,-120,-19,2,-5,-114,9,-38, 
  /* [8][0][][] */ -40,5,-74,-27,-28,-41,-19,-39, -61,-53,-29,2,-34,-36,-127,-32, -24,-64,-102,-67,-15,-98,-22,-65, 
  /* [9][0][][] */ 0,-84,-38,-19,-42,-48,-72,-9, -38,-27,-62,-37,-127,3,-41,-54, -19,-41,-5,-12,7,-25,-88,-34, 
  /* [10][0][][] */ 5,-54,-6,-32,-127,-22,-14,-4, -6,-47,-29,-15,-15,-37,-36,-18, -22,-25,-4,-22,4,-22,-36,-56, 
  /* [11][0][][] */ 1,-89,-18,36,6,-127,19,5, -4,-39,-23,-15,7,-53,1,6, -6,-18,20,39,-7,-19,14,12, 
  /* [12][0][][] */ -127,1,-49,-29,-39,-63,4,-103, -126,-26,-19,-63,-71,-118,-38,-50, -30,-34,-14,-5,-10,-36,-30,-79, 
  /* [13][0][][] */ 9,-31,-76,11,-113,-73,-29,-10, -3,-8,-119,-11,-87,-85,-127,-8, 10,-32,-84,16,-16,-13,-21,-3, 
  /* [14][0][][] */ -127,-18,6,9,14,-15,2,-35, -105,-13,3,-11,14,-8,-2,-62, -81,-10,0,7,14,-14,11,-14, 
  /* [15][0][][] */ -38,-47,-13,-21,-35,-71,-102,0, 5,-52,-4,-55,-16,-95,-127,7, -5,-79,-7,-17,-88,-20,-96,-5, 
};
const TfArray<4, int> tensor_dimension8 = { 4, { 16,1,3,8 } };
const TfArray<16, float> quant8_scale = { 16, { 0.028079532086849213, 0.0052632829174399376, 0.021524745970964432, 0.014619416557252407, 0.034689623862504959, 0.0038201694842427969, 0.014798377640545368, 0.038671288639307022, 0.012793398462235928, 0.026160057634115219, 0.035023566335439682, 0.016595056280493736, 0.010912824422121048, 0.030179325491189957, 0.026410743594169617, 0.036389194428920746, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int32_t tensor_data9[16] = { -3665, -3336, 596, -1096, -176, -2745, -4166, -2850, -2335, 432, 365, -1187, -1883, -2986, -55, 333, };
const TfArray<1, int> tensor_dimension9 = { 1, { 16 } };
const TfArray<16, float> quant9_scale = { 16, { 0.00098900659941136837, 0.00018538134463597089, 0.00075813638977706432, 0.00051491952035576105, 0.0012218246702104807, 0.00013455255248118192, 0.00052122282795608044, 0.0013620653189718723, 0.00045060418779030442, 0.00092139956541359425, 0.001233586692251265, 0.00058450474170967937, 0.00038436733302660286, 0.0010629646712914109, 0.00093022908549755812, 0.0012816862436011434, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int8_t tensor_data10[3*128] = { 
  9, -6, -2, 8, 8, -1, -10, 17, 22, -17, -14, 8, 2, 9, -1, 11, 2, 0, -1, 9, 8, 2, -10, 8, 18, -17, -3, 6, 2, 10, -10, 5, 11, 2, -4, 9, 5, 7, -28, 13, 9, -9, -5, 7, -13, 1, -9, 15, 5, 2, -5, 6, 4, 3, -19, 5, 2, -7, -8, -2, -15, 3, -8, 10, 6, 6, -3, 8, 9, 4, -14, 7, 3, -5, 0, 3, -25, 4, -12, 13, 7, 5, -5, 5, 11, -4, -17, 9, 0, -31, -6, 9, -4, 13, -4, 12, 10, -1, 4, 9, 6, -3, -3, 9, 5, -26, -8, 6, -5, 6, -11, 13, 2, -6, -12, -2, 9, -1, -16, 0, 7, -2, 1, 5, 2, -13, -7, 4, 
  -5, 1, -7, 14, -4, -3, 3, -5, -4, -8, -8, 3, -10, -8, 2, -17, -7, 10, -14, 8, -5, 1, 0, 1, -7, -2, -9, 6, 3, 3, 5, -9, -3, 5, -6, 4, -3, 1, 7, -1, 4, -10, -6, 1, -9, -3, 4, -13, -2, -4, -7, 9, -6, -3, 2, 0, 5, -3, -16, 1, 9, -1, 2, -19, -2, 4, -13, 5, -3, 2, -1, -4, 5, -7, -11, 3, 13, -2, 0, -17, 2, 7, -11, 5, -2, -1, 8, -1, 16, -10, -9, 7, -1, 0, 6, -13, -6, 6, -7, 13, -4, 0, -2, 1, 13, 3, -15, 6, 8, -4, 4, -10, -13, 2, -7, -17, -4, 5, 9, -2, 5, -3, -11, 5, 4, 9, 9, -12, 
  3, -1, 7, -49, 2, 4, -4, -6, -49, 9, 15, -13, 6, -5, -9, 2, -7, 2, 11, -45, -4, -1, -7, -2, -63, 13, -4, -11, -4, 10, 0, 6, -6, 1, 14, -36, -1, 2, -8, 2, -44, 3, 11, -15, 0, -3, -7, 4, -11, -6, 5, -29, -8, -2, 6, 6, -47, 9, 11, -15, 5, 0, -1, 9, 2, 5, 7, -37, 1, 0, 2, -5, -40, 4, 8, -6, 2, -3, -7, 4, -3, -8, 14, -28, -1, 1, -6, 3, -22, 18, 17, -16, 7, 2, -2, 1, -5, -3, 10, -47, -2, 5, -3, 6, -55, 13, 11, -7, -2, 9, -6, 6, -10, 4, 8, -30, 1, 0, -9, 3, -127, 10, 2, -18, -5, 8, -4, 0, 
};
const TfArray<2, int> tensor_dimension10 = { 2, { 3,128 } };
const TfArray<1, float> quant10_scale = { 1, { 0.034226603806018829, } };
const TfArray<1, int> quant10_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(8) int32_t tensor_data11[3] = { -2224, 844, 1244, };
const TfArray<1, int> tensor_dimension11 = { 1, { 3 } };
const TfArray<1, float> quant11_scale = { 1, { 0.0010331063531339169, } };
const TfArray<1, int> quant11_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const TfArray<4, int> tensor_dimension12 = { 4, { 1,1,29,40 } };
const TfArray<1, float> quant12_scale = { 1, { 0.0034620098304003477, } };
const TfArray<1, int> quant12_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const TfArray<4, int> tensor_dimension13 = { 4, { 1,1,29,8 } };
const TfArray<1, float> quant13_scale = { 1, { 0.035221617668867111, } };
const TfArray<1, int> quant13_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const TfArray<4, int> tensor_dimension14 = { 4, { 1,29,1,8 } };
const TfArray<1, float> quant14_scale = { 1, { 0.035221617668867111, } };
const TfArray<1, int> quant14_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const TfArray<4, int> tensor_dimension15 = { 4, { 1,15,1,8 } };
const TfArray<1, float> quant15_scale = { 1, { 0.035221617668867111, } };
const TfArray<1, int> quant15_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const TfArray<4, int> tensor_dimension16 = { 4, { 1,1,15,8 } };
const TfArray<1, float> quant16_scale = { 1, { 0.035221617668867111, } };
const TfArray<1, int> quant16_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const TfArray<4, int> tensor_dimension17 = { 4, { 1,1,15,16 } };
const TfArray<1, float> quant17_scale = { 1, { 0.030184308066964149, } };
const TfArray<1, int> quant17_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const TfArray<4, int> tensor_dimension18 = { 4, { 1,15,1,16 } };
const TfArray<1, float> quant18_scale = { 1, { 0.030184308066964149, } };
const TfArray<1, int> quant18_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const TfArray<4, int> tensor_dimension19 = { 4, { 1,8,1,16 } };
const TfArray<1, float> quant19_scale = { 1, { 0.030184308066964149, } };
const TfArray<1, int> quant19_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const TfArray<2, int> tensor_dimension20 = { 2, { 1,128 } };
const TfArray<1, float> quant20_scale = { 1, { 0.030184308066964149, } };
const TfArray<1, int> quant20_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const TfArray<2, int> tensor_dimension21 = { 2, { 1,3 } };
const TfArray<1, float> quant21_scale = { 1, { 0.25052493810653687, } };
const TfArray<1, int> quant21_zero = { 1, { 44 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const TfArray<2, int> tensor_dimension22 = { 2, { 1,3 } };
const TfArray<1, float> quant22_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant22_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,1 } };
const TfArray<1, int> outputs0 = { 1, { 12 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 12,6,7 } };
const TfArray<1, int> outputs1 = { 1, { 13 } };
const TfLiteReshapeParams opdata2 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs2 = { 2, { 13,2 } };
const TfArray<1, int> outputs2 = { 1, { 14 } };
const TfLitePoolParams opdata3 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs3 = { 1, { 14 } };
const TfArray<1, int> outputs3 = { 1, { 15 } };
const TfLiteReshapeParams opdata4 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs4 = { 2, { 15,3 } };
const TfArray<1, int> outputs4 = { 1, { 16 } };
const TfLiteConvParams opdata5 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 16,8,9 } };
const TfArray<1, int> outputs5 = { 1, { 17 } };
const TfLiteReshapeParams opdata6 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs6 = { 2, { 17,4 } };
const TfArray<1, int> outputs6 = { 1, { 18 } };
const TfLitePoolParams opdata7 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs7 = { 1, { 18 } };
const TfArray<1, int> outputs7 = { 1, { 19 } };
const TfLiteReshapeParams opdata8 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs8 = { 2, { 19,5 } };
const TfArray<1, int> outputs8 = { 1, { 20 } };
const TfLiteFullyConnectedParams opdata9 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs9 = { 3, { 20,10,11 } };
const TfArray<1, int> outputs9 = { 1, { 21 } };
const TfLiteSoftmaxParams opdata10 = { 1 };
const TfArray<1, int> inputs10 = { 1, { 21 } };
const TfArray<1, int> outputs10 = { 1, { 22 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1168, (TfLiteIntArray*)&tensor_dimension0, 1160, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 8, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 960, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 12, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension12, 1160, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 1648, (TfLiteIntArray*)&tensor_dimension13, 232, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension14, 232, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 240, (TfLiteIntArray*)&tensor_dimension15, 120, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension16, 120, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 240, (TfLiteIntArray*)&tensor_dimension17, 240, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant17))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension18, 240, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant18))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 240, (TfLiteIntArray*)&tensor_dimension19, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension20, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant20))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 128, (TfLiteIntArray*)&tensor_dimension21, 3, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension22, 3, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant22))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_SOFTMAX, },
};
static std::vector<void*> overflow_buffers;
static void * AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers.push_back(ptr);
    return ptr;
  }

  current_location -= bytes;

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static std::vector<scratch_buffer_t> scratch_buffers;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
  if (!b.ptr) {
    return kTfLiteError;
  }

  scratch_buffers.push_back(b);

  *buffer_idx = scratch_buffers.size() - 1;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > static_cast<int>(scratch_buffers.size()) - 1) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {
  return &tflTensors[tensor_idx];
}

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {
  return &tflEvalTensors[tensor_idx];
}

} // namespace

TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.GetTensor = &GetTensor;
  ctx.GetEvalTensor = &GetEvalTensor;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 23;
  for(size_t i = 0; i < 23; ++i) {
    tflTensors[i].type = tensorData[i].type;
    tflEvalTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;
    tflEvalTensors[i].dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

     tflTensors[i].data.data =  start;
     tflEvalTensors[i].data.data =  start;
    }
    else{
       tflTensors[i].data.data = tensorData[i].data;
       tflEvalTensors[i].data.data = tensorData[i].data;
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
    tflEvalTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
      tflTensors[i].params.scale = quant->scale->data[0];
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    }
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_RESHAPE] = Register_RESHAPE();
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_MAX_POOL_2D] = Register_MAX_POOL_2D();
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for(size_t i = 0; i < 11; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for(size_t i = 0; i < 11; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  22, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for(size_t i = 0; i < 11; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif
  scratch_buffers.clear();
  for (size_t ix = 0; ix < overflow_buffers.size(); ix++) {
    free(overflow_buffers[ix]);
  }
  overflow_buffers.clear();
  return kTfLiteOk;
}
